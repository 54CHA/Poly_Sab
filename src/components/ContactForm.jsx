import { useState } from "react";
import { Button } from "./ui/button";
import { Input } from "./ui/input";
import { Textarea } from "./ui/textarea";
import { toast } from "sonner";
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "./ui/sheet";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "./ui/select";
import { MessageSquare } from "lucide-react";

const TELEGRAM_BOT_TOKEN = import.meta.env.VITE_TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = import.meta.env.VITE_TELEGRAM_CHAT_ID;

const CONTACT_REASONS = [
  { value: "bug", label: "–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ" },
  { value: "complaint", label: "–ñ–∞–ª–æ–±–∞" },
  { value: "suggestion", label: "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ" },
  { value: "other", label: "–î—Ä—É–≥–æ–µ" },
];

const ContactForm = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [formData, setFormData] = useState({
    email: "",
    reason: "",
    message: "",
  });

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!formData.message.trim() || !formData.reason) {
      toast.error("–û—à–∏–±–∫–∞", {
        description: "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è –∏ –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
      });
      return;
    }

    setIsLoading(true);
    try {
      const reasonLabel = CONTACT_REASONS.find(r => r.value === formData.reason)?.label || formData.reason;
      const text = `üîî –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\nüìù –¢–∏–ø: ${reasonLabel}\nüìß Email: ${
        formData.email || "–ù–µ —É–∫–∞–∑–∞–Ω"
      }\n\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:\n${formData.message}`;

      const response = await fetch(
        `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            chat_id: TELEGRAM_CHAT_ID,
            text,
            parse_mode: "HTML",
          }),
        }
      );

      if (!response.ok) throw new Error("Failed to send message");

      toast.success("–£—Å–ø–µ—à–Ω–æ", {
        description: "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
      });

      setFormData({
        email: "",
        reason: "",
        message: "",
      });
      setIsOpen(false);
    } catch (error) {
      console.error("Error sending message:", error);
      toast.error("–û—à–∏–±–∫–∞", {
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Sheet open={isOpen} onOpenChange={setIsOpen}>
      <SheetTrigger asChild>
        <Button
          variant="ghost"
          size="icon"
          className="text-muted-foreground hover:text-foreground transition-colors"
        >
          <MessageSquare className="h-5 w-5" />
        </Button>
      </SheetTrigger>
      <SheetContent className="w-full sm:max-w-[400px] h-full sm:h-auto" side="right">
        <SheetHeader>
          <SheetTitle>–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏</SheetTitle>
          <SheetDescription>
            –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ
          </SheetDescription>
        </SheetHeader>
        <form onSubmit={handleSubmit} className="space-y-4 mt-4">
          <div>
            <Select
              value={formData.reason}
              onValueChange={(value) =>
                setFormData((prev) => ({ ...prev, reason: value }))
              }
              required
            >
              <SelectTrigger>
                <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è" />
              </SelectTrigger>
              <SelectContent>
                {CONTACT_REASONS.map((reason) => (
                  <SelectItem key={reason.value} value={reason.value}>
                    {reason.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          <div>
            <Input
              type="email"
              placeholder="–í–∞—à email (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
              value={formData.email}
              onChange={(e) =>
                setFormData((prev) => ({ ...prev, email: e.target.value }))
              }
            />
          </div>
          <div>
            <Textarea
              placeholder="–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
              value={formData.message}
              onChange={(e) =>
                setFormData((prev) => ({ ...prev, message: e.target.value }))
              }
              rows={4}
              required
            />
          </div>
          <Button type="submit" className="w-full" disabled={isLoading}>
            {isLoading ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"}
          </Button>
        </form>
      </SheetContent>
    </Sheet>
  );
};

export default ContactForm; 
